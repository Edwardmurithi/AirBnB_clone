AirBnB clone - The console

After 4 months, you will have a complete web application
composed by:

* A command interpreter to manipulate data without a visual 
  interface, like in a Shell (perfect for development and 
  debugging)

* A website (the front-end) that shows the final product to 
  everybody: static and dynamic

* A database or files that store data (data = objects)

* An API that provides a communication interface between the
  front-end and your data (retrieve, create, delete, update them)


# Concepts to learn

- Unittest
- Python packages concept page
- Serialization/Deserialization
- *args, **kwargs
- datetime
- More coming soon!


Steps:

# The console

- create your data model
- manage (create, update, destroy, etc) objects via a console / command interpreter
- store and persist objects to a file (JSON file)

## Explanation

The first piece is to manipulate a powerful storage system. This storage engine will give
us an abstraction between “My object” and “How they are stored and persisted”. This means:
from your console code (the command interpreter itself) and from the front-end and RestAPI 
you will build later, you won’t have to pay attention (take care) of how your objects are stored.

This abstraction will also allow you to change the type of storage easily without updating all of your codebase.

# Web static

- learn HTML/CSS
- create the HTML of your application
- create template of each object

# MySQL storage

- replace the file storage by a Database storage
- map your models to a table in database by using an O.R.M.


# Web framework - templating
- create your first web server in Python
- make your static HTML file dynamic by using objects stored in a file or database

# Files and Directories

models - directory will contain all classes used for entire project.
test - directory will contain all Unittests.
console.py - file is the entry point of our command interpreter.
models/base_model.py - file is the base class of all our models. It contains common elements:
            * attributes: id, created_at and updated_at
            * methods: save() and to_json()
models/engine - directory will contain all storage classes (using the same prototype).
For the moment you will have only one: file_storage.py.